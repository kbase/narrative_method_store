
package us.kbase.narrativemethodstore;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * <p>Original spec-file type: MethodParameter</p>
 * <pre>
 * Description of a method parameter.
 * id - id of the parameter, must be unique within the method
 * ui_name - short name that is displayed to the user
 * short_hint - short phrase or sentence describing the parameter
 * description - longer and more technical description of the parameter
 * field_type - one of: text | textarea | textsubdata | intslider | floatslider | checkbox |
 *              dropdown | radio | tab | file | dynamic_dropdown
 * allow_mutiple - only supported for field_type text, allows entry of a list
 *                 instead of a single value, default is 0
 *                 if set, the number of starting boxes will be either 1 or the
 *                 number of elements in the default_values list
 * optional - set to true to make the field optional, default is 0
 * advanced - set to true to make this an advanced option, default is 0
 *            if an option is advanced, it should also be optional or have
 *            a default value
 * disabled   - set to true to disable user input, default is 0
 *            if disabled, a default value should be provided
 * ui_class  - input | output | parameter
 *            value is autogenerated based on the specification which determines
 *            if it is an input parameter, output parameter, or just plain old parameter
 *            (input is generally an input data object, output is an output data object,
 *            and plain old parameter is more or less numbers, fixed selections, etc)
 *            
 * valid_file_types - a list of staging area file types that are valid for the method
 *     parameter. This might apply to a text box, dropdown, dynamic dropdown, etc. depending
 *     on the context. The file type is available in the mappings key of the json response
 *     from staging service importer mappings endpoint. Each mapping has a file_type key
 *     containing the type.
 * @optional text_options textarea_options intslider_options floatslider_options
 * @optional checkbox_options dropdown_options radio_options tab_options dynamic_dropdown_options
 * </pre>
 * 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Generated("com.googlecode.jsonschema2pojo")
@JsonPropertyOrder({
    "id",
    "ui_name",
    "short_hint",
    "description",
    "field_type",
    "allow_multiple",
    "optional",
    "advanced",
    "disabled",
    "ui_class",
    "default_values",
    "valid_file_types",
    "text_options",
    "textarea_options",
    "intslider_options",
    "floatslider_options",
    "checkbox_options",
    "dropdown_options",
    "dynamic_dropdown_options",
    "radio_options",
    "tab_options",
    "textsubdata_options"
})
public class MethodParameter {

    @JsonProperty("id")
    private java.lang.String id;
    @JsonProperty("ui_name")
    private java.lang.String uiName;
    @JsonProperty("short_hint")
    private java.lang.String shortHint;
    @JsonProperty("description")
    private java.lang.String description;
    @JsonProperty("field_type")
    private java.lang.String fieldType;
    @JsonProperty("allow_multiple")
    private Long allowMultiple;
    @JsonProperty("optional")
    private Long optional;
    @JsonProperty("advanced")
    private Long advanced;
    @JsonProperty("disabled")
    private Long disabled;
    @JsonProperty("ui_class")
    private java.lang.String uiClass;
    @JsonProperty("default_values")
    private List<String> defaultValues;
    @JsonProperty("valid_file_types")
    private List<String> validFileTypes;
    /**
     * <p>Original spec-file type: TextOptions</p>
     * <pre>
     * valid_ws_types  - list of valid ws types that can be used for input
     * validate_as     - int | float | nonnumeric | none
     * is_output_name  - true if the user is specifying an output name, false otherwise, default is false
     * </pre>
     * 
     */
    @JsonProperty("text_options")
    private TextOptions textOptions;
    /**
     * <p>Original spec-file type: TextAreaOptions</p>
     * 
     * 
     */
    @JsonProperty("textarea_options")
    private TextAreaOptions textareaOptions;
    /**
     * <p>Original spec-file type: IntSliderOptions</p>
     * 
     * 
     */
    @JsonProperty("intslider_options")
    private IntSliderOptions intsliderOptions;
    /**
     * <p>Original spec-file type: FloatSliderOptions</p>
     * 
     * 
     */
    @JsonProperty("floatslider_options")
    private FloatSliderOptions floatsliderOptions;
    /**
     * <p>Original spec-file type: CheckboxOptions</p>
     * 
     * 
     */
    @JsonProperty("checkbox_options")
    private CheckboxOptions checkboxOptions;
    /**
     * <p>Original spec-file type: DropdownOptions</p>
     * <pre>
     * Defines a parameter field that allows users to select from a list of options. It will
     * appear as a dropdown (a 'select' HTML element).
     * Parameters:
     *    options   - a list of maps with keys 'value' and 'display'; 'display' is the text
     *              presented to the user, and 'value' is what is passed from the element
     *              when it is submitted. See the DropDownOption type for the spec.
     *    multiselection - If true, multiple selections are allowed from a single field, and
     *              the parameter will return a list, rather than a single value.
     *              This parameter is optional.
     *              Default = false
     * </pre>
     * 
     */
    @JsonProperty("dropdown_options")
    private DropdownOptions dropdownOptions;
    /**
     * <p>Original spec-file type: DynamicDropdownOptions</p>
     * <pre>
     * Defines a parameter field that allows autocomplete based on a call to a dynamic service.
     * For instance, selection of files from the staging_service or from kbase_search. It will
     * appear as a text field with dropdown similar to selection of other WS data objects.
     *     data_source - one of ftp_staging | search | custom. Provides sensible defaults to
     *                    for the following parameters for a common type of dropdown which can be
     *                    overwritten
     *     service_function - name of SDK method including prefix with SDK module started up as
     *                    dynamic service (it's fully qualified method name where module and
     *                    method are separated by '.').
     *     service_version - optional version of module used in service_function
     *                    (default value is 'release').
     *     service_params - The parameters that will be supplied to the dynamic service call as
     *                    JSON. The special text "{{dynamic_dropdown_input}}" will be replaced by
     *                    the value of user input at call time.
     *     selection_id - The value of this key will be extracted from the item selected by the
     *                    user. The item is expected to be represented as a map.
     *     exact_match_on - if exactly matching the user's input to the results from the dynamic
     *                    service is required, this field contains the name of the key in
     *                    the results document that contains the value to which the user's
     *                    input should be matched. May or may not be the same key as
     *                    'selection_id'.
     *     description_template - Defines how the description of items is rendered using
     *                    Handlebar templates (use the keys in the items as variable names)
     *     multiselection - If true, then multiple selections are allowed in a single input field.
     *                    This will override the allow_multiple option (which allows user addition)
     *                    of additional fields.  If true, then this parameter will return a list.
     *                    Default= false
     *     query_on_empty_input - true, the default, to send a request to the dynamic service even
     *                    if there is no input.
     *     result_array_index - The index of the result array returned from the dynamic service
     *                    from where the selection items will be extracted. Default 0.
     *     path_to_selection_items - The path into the result data object to the list of
     *                    selection items. If missing, the data at the specified result array
     *                    index is used (defaulting to the first returned value in the list).
     *     The selection items data structure must be a list of mappings or structures.
     *     As an example of correctly specifying where the selection items are within the
     *     data structure returned from the dynamic service, if the data structure is:
     *     [
     *         "foo",                # return array position 0
     *         {                     # return array position 1
     *          "interesting_data":
     *              [
     *                  "baz",
     *                  "boo",
     *                  [
     *                      {"id": 1,
     *                       "name": "foo"
     *                       },
     *                       ...
     *                      {"id": 42,
     *                       "name": "wowbagger"
     *                       }
     *                  ],
     *                  "bat"
     *              ]
     *          },
     *          "bar"                # return array position 2
     *      ]
     *     Note that KBase dynamic services all return an array of values, even for single-value
     *     returns, as the KIDL spec allows specifying multiple return values per function.
     *     In this case:
     *         result_array_index would be 1
     *         path_to_selection_items would be ["interesting_data", "2"]
     *         selection_id would be "name"
     *     The selection items would be the 42 items represented by
     *     {"id": 1,
     *      "name": "foo"
     *      },
     *      ...
     *     {"id": 42,
     *      "name": "wowbagger"
     *      }
     *     Selection items must always be a list of maps.
     *     The final value returned when the user selects a value would be the "name" field -
     *     "foo" if the first item is selected, and "wowbagger" if the last item is selected.
     * </pre>
     * 
     */
    @JsonProperty("dynamic_dropdown_options")
    private DynamicDropdownOptions dynamicDropdownOptions;
    /**
     * <p>Original spec-file type: RadioOptions</p>
     * 
     * 
     */
    @JsonProperty("radio_options")
    private RadioOptions radioOptions;
    /**
     * <p>Original spec-file type: TabOptions</p>
     * 
     * 
     */
    @JsonProperty("tab_options")
    private TabOptions tabOptions;
    /**
     * <p>Original spec-file type: TextSubdataOptions</p>
     * <pre>
     * Defines a parameter field that allows autocomplete based on
     * subdata of an existing object.  For instance, selection of feature ids
     * from a Genome object.  It will appear as a text field with dropdown
     * similar to selection of other WS data objects.
     *     placeholder - placeholder text to display in the field
     *     multiselection - if true, then multiple selections are allowed in
     *                      a single input field.  This will override the
     *                      allow_multiple option (which allows user addition)
     *                      of additional fields.  If true, then this parameter
     *                      will return a list. Default= false
     *     show_src_obj - if true, then the dropdown will indicate the ids along
     *                    with some text indicating what data object the subdata
     *                    was retrieved from. Default=true
     *     allow_custom - if true, then user specified inputs not found in the
     *                    list are accepted.  if false, users can only select from
     *                    the valid list of selections. Default=false
     * </pre>
     * 
     */
    @JsonProperty("textsubdata_options")
    private TextSubdataOptions textsubdataOptions;
    private Map<java.lang.String, Object> additionalProperties = new HashMap<java.lang.String, Object>();

    @JsonProperty("id")
    public java.lang.String getId() {
        return id;
    }

    @JsonProperty("id")
    public void setId(java.lang.String id) {
        this.id = id;
    }

    public MethodParameter withId(java.lang.String id) {
        this.id = id;
        return this;
    }

    @JsonProperty("ui_name")
    public java.lang.String getUiName() {
        return uiName;
    }

    @JsonProperty("ui_name")
    public void setUiName(java.lang.String uiName) {
        this.uiName = uiName;
    }

    public MethodParameter withUiName(java.lang.String uiName) {
        this.uiName = uiName;
        return this;
    }

    @JsonProperty("short_hint")
    public java.lang.String getShortHint() {
        return shortHint;
    }

    @JsonProperty("short_hint")
    public void setShortHint(java.lang.String shortHint) {
        this.shortHint = shortHint;
    }

    public MethodParameter withShortHint(java.lang.String shortHint) {
        this.shortHint = shortHint;
        return this;
    }

    @JsonProperty("description")
    public java.lang.String getDescription() {
        return description;
    }

    @JsonProperty("description")
    public void setDescription(java.lang.String description) {
        this.description = description;
    }

    public MethodParameter withDescription(java.lang.String description) {
        this.description = description;
        return this;
    }

    @JsonProperty("field_type")
    public java.lang.String getFieldType() {
        return fieldType;
    }

    @JsonProperty("field_type")
    public void setFieldType(java.lang.String fieldType) {
        this.fieldType = fieldType;
    }

    public MethodParameter withFieldType(java.lang.String fieldType) {
        this.fieldType = fieldType;
        return this;
    }

    @JsonProperty("allow_multiple")
    public Long getAllowMultiple() {
        return allowMultiple;
    }

    @JsonProperty("allow_multiple")
    public void setAllowMultiple(Long allowMultiple) {
        this.allowMultiple = allowMultiple;
    }

    public MethodParameter withAllowMultiple(Long allowMultiple) {
        this.allowMultiple = allowMultiple;
        return this;
    }

    @JsonProperty("optional")
    public Long getOptional() {
        return optional;
    }

    @JsonProperty("optional")
    public void setOptional(Long optional) {
        this.optional = optional;
    }

    public MethodParameter withOptional(Long optional) {
        this.optional = optional;
        return this;
    }

    @JsonProperty("advanced")
    public Long getAdvanced() {
        return advanced;
    }

    @JsonProperty("advanced")
    public void setAdvanced(Long advanced) {
        this.advanced = advanced;
    }

    public MethodParameter withAdvanced(Long advanced) {
        this.advanced = advanced;
        return this;
    }

    @JsonProperty("disabled")
    public Long getDisabled() {
        return disabled;
    }

    @JsonProperty("disabled")
    public void setDisabled(Long disabled) {
        this.disabled = disabled;
    }

    public MethodParameter withDisabled(Long disabled) {
        this.disabled = disabled;
        return this;
    }

    @JsonProperty("ui_class")
    public java.lang.String getUiClass() {
        return uiClass;
    }

    @JsonProperty("ui_class")
    public void setUiClass(java.lang.String uiClass) {
        this.uiClass = uiClass;
    }

    public MethodParameter withUiClass(java.lang.String uiClass) {
        this.uiClass = uiClass;
        return this;
    }

    @JsonProperty("default_values")
    public List<String> getDefaultValues() {
        return defaultValues;
    }

    @JsonProperty("default_values")
    public void setDefaultValues(List<String> defaultValues) {
        this.defaultValues = defaultValues;
    }

    public MethodParameter withDefaultValues(List<String> defaultValues) {
        this.defaultValues = defaultValues;
        return this;
    }

    @JsonProperty("valid_file_types")
    public List<String> getValidFileTypes() {
        return validFileTypes;
    }

    @JsonProperty("valid_file_types")
    public void setValidFileTypes(List<String> validFileTypes) {
        this.validFileTypes = validFileTypes;
    }

    public MethodParameter withValidFileTypes(List<String> validFileTypes) {
        this.validFileTypes = validFileTypes;
        return this;
    }

    /**
     * <p>Original spec-file type: TextOptions</p>
     * <pre>
     * valid_ws_types  - list of valid ws types that can be used for input
     * validate_as     - int | float | nonnumeric | none
     * is_output_name  - true if the user is specifying an output name, false otherwise, default is false
     * </pre>
     * 
     */
    @JsonProperty("text_options")
    public TextOptions getTextOptions() {
        return textOptions;
    }

    /**
     * <p>Original spec-file type: TextOptions</p>
     * <pre>
     * valid_ws_types  - list of valid ws types that can be used for input
     * validate_as     - int | float | nonnumeric | none
     * is_output_name  - true if the user is specifying an output name, false otherwise, default is false
     * </pre>
     * 
     */
    @JsonProperty("text_options")
    public void setTextOptions(TextOptions textOptions) {
        this.textOptions = textOptions;
    }

    public MethodParameter withTextOptions(TextOptions textOptions) {
        this.textOptions = textOptions;
        return this;
    }

    /**
     * <p>Original spec-file type: TextAreaOptions</p>
     * 
     * 
     */
    @JsonProperty("textarea_options")
    public TextAreaOptions getTextareaOptions() {
        return textareaOptions;
    }

    /**
     * <p>Original spec-file type: TextAreaOptions</p>
     * 
     * 
     */
    @JsonProperty("textarea_options")
    public void setTextareaOptions(TextAreaOptions textareaOptions) {
        this.textareaOptions = textareaOptions;
    }

    public MethodParameter withTextareaOptions(TextAreaOptions textareaOptions) {
        this.textareaOptions = textareaOptions;
        return this;
    }

    /**
     * <p>Original spec-file type: IntSliderOptions</p>
     * 
     * 
     */
    @JsonProperty("intslider_options")
    public IntSliderOptions getIntsliderOptions() {
        return intsliderOptions;
    }

    /**
     * <p>Original spec-file type: IntSliderOptions</p>
     * 
     * 
     */
    @JsonProperty("intslider_options")
    public void setIntsliderOptions(IntSliderOptions intsliderOptions) {
        this.intsliderOptions = intsliderOptions;
    }

    public MethodParameter withIntsliderOptions(IntSliderOptions intsliderOptions) {
        this.intsliderOptions = intsliderOptions;
        return this;
    }

    /**
     * <p>Original spec-file type: FloatSliderOptions</p>
     * 
     * 
     */
    @JsonProperty("floatslider_options")
    public FloatSliderOptions getFloatsliderOptions() {
        return floatsliderOptions;
    }

    /**
     * <p>Original spec-file type: FloatSliderOptions</p>
     * 
     * 
     */
    @JsonProperty("floatslider_options")
    public void setFloatsliderOptions(FloatSliderOptions floatsliderOptions) {
        this.floatsliderOptions = floatsliderOptions;
    }

    public MethodParameter withFloatsliderOptions(FloatSliderOptions floatsliderOptions) {
        this.floatsliderOptions = floatsliderOptions;
        return this;
    }

    /**
     * <p>Original spec-file type: CheckboxOptions</p>
     * 
     * 
     */
    @JsonProperty("checkbox_options")
    public CheckboxOptions getCheckboxOptions() {
        return checkboxOptions;
    }

    /**
     * <p>Original spec-file type: CheckboxOptions</p>
     * 
     * 
     */
    @JsonProperty("checkbox_options")
    public void setCheckboxOptions(CheckboxOptions checkboxOptions) {
        this.checkboxOptions = checkboxOptions;
    }

    public MethodParameter withCheckboxOptions(CheckboxOptions checkboxOptions) {
        this.checkboxOptions = checkboxOptions;
        return this;
    }

    /**
     * <p>Original spec-file type: DropdownOptions</p>
     * <pre>
     * Defines a parameter field that allows users to select from a list of options. It will
     * appear as a dropdown (a 'select' HTML element).
     * Parameters:
     *    options   - a list of maps with keys 'value' and 'display'; 'display' is the text
     *              presented to the user, and 'value' is what is passed from the element
     *              when it is submitted. See the DropDownOption type for the spec.
     *    multiselection - If true, multiple selections are allowed from a single field, and
     *              the parameter will return a list, rather than a single value.
     *              This parameter is optional.
     *              Default = false
     * </pre>
     * 
     */
    @JsonProperty("dropdown_options")
    public DropdownOptions getDropdownOptions() {
        return dropdownOptions;
    }

    /**
     * <p>Original spec-file type: DropdownOptions</p>
     * <pre>
     * Defines a parameter field that allows users to select from a list of options. It will
     * appear as a dropdown (a 'select' HTML element).
     * Parameters:
     *    options   - a list of maps with keys 'value' and 'display'; 'display' is the text
     *              presented to the user, and 'value' is what is passed from the element
     *              when it is submitted. See the DropDownOption type for the spec.
     *    multiselection - If true, multiple selections are allowed from a single field, and
     *              the parameter will return a list, rather than a single value.
     *              This parameter is optional.
     *              Default = false
     * </pre>
     * 
     */
    @JsonProperty("dropdown_options")
    public void setDropdownOptions(DropdownOptions dropdownOptions) {
        this.dropdownOptions = dropdownOptions;
    }

    public MethodParameter withDropdownOptions(DropdownOptions dropdownOptions) {
        this.dropdownOptions = dropdownOptions;
        return this;
    }

    /**
     * <p>Original spec-file type: DynamicDropdownOptions</p>
     * <pre>
     * Defines a parameter field that allows autocomplete based on a call to a dynamic service.
     * For instance, selection of files from the staging_service or from kbase_search. It will
     * appear as a text field with dropdown similar to selection of other WS data objects.
     *     data_source - one of ftp_staging | search | custom. Provides sensible defaults to
     *                    for the following parameters for a common type of dropdown which can be
     *                    overwritten
     *     service_function - name of SDK method including prefix with SDK module started up as
     *                    dynamic service (it's fully qualified method name where module and
     *                    method are separated by '.').
     *     service_version - optional version of module used in service_function
     *                    (default value is 'release').
     *     service_params - The parameters that will be supplied to the dynamic service call as
     *                    JSON. The special text "{{dynamic_dropdown_input}}" will be replaced by
     *                    the value of user input at call time.
     *     selection_id - The value of this key will be extracted from the item selected by the
     *                    user. The item is expected to be represented as a map.
     *     exact_match_on - if exactly matching the user's input to the results from the dynamic
     *                    service is required, this field contains the name of the key in
     *                    the results document that contains the value to which the user's
     *                    input should be matched. May or may not be the same key as
     *                    'selection_id'.
     *     description_template - Defines how the description of items is rendered using
     *                    Handlebar templates (use the keys in the items as variable names)
     *     multiselection - If true, then multiple selections are allowed in a single input field.
     *                    This will override the allow_multiple option (which allows user addition)
     *                    of additional fields.  If true, then this parameter will return a list.
     *                    Default= false
     *     query_on_empty_input - true, the default, to send a request to the dynamic service even
     *                    if there is no input.
     *     result_array_index - The index of the result array returned from the dynamic service
     *                    from where the selection items will be extracted. Default 0.
     *     path_to_selection_items - The path into the result data object to the list of
     *                    selection items. If missing, the data at the specified result array
     *                    index is used (defaulting to the first returned value in the list).
     *     The selection items data structure must be a list of mappings or structures.
     *     As an example of correctly specifying where the selection items are within the
     *     data structure returned from the dynamic service, if the data structure is:
     *     [
     *         "foo",                # return array position 0
     *         {                     # return array position 1
     *          "interesting_data":
     *              [
     *                  "baz",
     *                  "boo",
     *                  [
     *                      {"id": 1,
     *                       "name": "foo"
     *                       },
     *                       ...
     *                      {"id": 42,
     *                       "name": "wowbagger"
     *                       }
     *                  ],
     *                  "bat"
     *              ]
     *          },
     *          "bar"                # return array position 2
     *      ]
     *     Note that KBase dynamic services all return an array of values, even for single-value
     *     returns, as the KIDL spec allows specifying multiple return values per function.
     *     In this case:
     *         result_array_index would be 1
     *         path_to_selection_items would be ["interesting_data", "2"]
     *         selection_id would be "name"
     *     The selection items would be the 42 items represented by
     *     {"id": 1,
     *      "name": "foo"
     *      },
     *      ...
     *     {"id": 42,
     *      "name": "wowbagger"
     *      }
     *     Selection items must always be a list of maps.
     *     The final value returned when the user selects a value would be the "name" field -
     *     "foo" if the first item is selected, and "wowbagger" if the last item is selected.
     * </pre>
     * 
     */
    @JsonProperty("dynamic_dropdown_options")
    public DynamicDropdownOptions getDynamicDropdownOptions() {
        return dynamicDropdownOptions;
    }

    /**
     * <p>Original spec-file type: DynamicDropdownOptions</p>
     * <pre>
     * Defines a parameter field that allows autocomplete based on a call to a dynamic service.
     * For instance, selection of files from the staging_service or from kbase_search. It will
     * appear as a text field with dropdown similar to selection of other WS data objects.
     *     data_source - one of ftp_staging | search | custom. Provides sensible defaults to
     *                    for the following parameters for a common type of dropdown which can be
     *                    overwritten
     *     service_function - name of SDK method including prefix with SDK module started up as
     *                    dynamic service (it's fully qualified method name where module and
     *                    method are separated by '.').
     *     service_version - optional version of module used in service_function
     *                    (default value is 'release').
     *     service_params - The parameters that will be supplied to the dynamic service call as
     *                    JSON. The special text "{{dynamic_dropdown_input}}" will be replaced by
     *                    the value of user input at call time.
     *     selection_id - The value of this key will be extracted from the item selected by the
     *                    user. The item is expected to be represented as a map.
     *     exact_match_on - if exactly matching the user's input to the results from the dynamic
     *                    service is required, this field contains the name of the key in
     *                    the results document that contains the value to which the user's
     *                    input should be matched. May or may not be the same key as
     *                    'selection_id'.
     *     description_template - Defines how the description of items is rendered using
     *                    Handlebar templates (use the keys in the items as variable names)
     *     multiselection - If true, then multiple selections are allowed in a single input field.
     *                    This will override the allow_multiple option (which allows user addition)
     *                    of additional fields.  If true, then this parameter will return a list.
     *                    Default= false
     *     query_on_empty_input - true, the default, to send a request to the dynamic service even
     *                    if there is no input.
     *     result_array_index - The index of the result array returned from the dynamic service
     *                    from where the selection items will be extracted. Default 0.
     *     path_to_selection_items - The path into the result data object to the list of
     *                    selection items. If missing, the data at the specified result array
     *                    index is used (defaulting to the first returned value in the list).
     *     The selection items data structure must be a list of mappings or structures.
     *     As an example of correctly specifying where the selection items are within the
     *     data structure returned from the dynamic service, if the data structure is:
     *     [
     *         "foo",                # return array position 0
     *         {                     # return array position 1
     *          "interesting_data":
     *              [
     *                  "baz",
     *                  "boo",
     *                  [
     *                      {"id": 1,
     *                       "name": "foo"
     *                       },
     *                       ...
     *                      {"id": 42,
     *                       "name": "wowbagger"
     *                       }
     *                  ],
     *                  "bat"
     *              ]
     *          },
     *          "bar"                # return array position 2
     *      ]
     *     Note that KBase dynamic services all return an array of values, even for single-value
     *     returns, as the KIDL spec allows specifying multiple return values per function.
     *     In this case:
     *         result_array_index would be 1
     *         path_to_selection_items would be ["interesting_data", "2"]
     *         selection_id would be "name"
     *     The selection items would be the 42 items represented by
     *     {"id": 1,
     *      "name": "foo"
     *      },
     *      ...
     *     {"id": 42,
     *      "name": "wowbagger"
     *      }
     *     Selection items must always be a list of maps.
     *     The final value returned when the user selects a value would be the "name" field -
     *     "foo" if the first item is selected, and "wowbagger" if the last item is selected.
     * </pre>
     * 
     */
    @JsonProperty("dynamic_dropdown_options")
    public void setDynamicDropdownOptions(DynamicDropdownOptions dynamicDropdownOptions) {
        this.dynamicDropdownOptions = dynamicDropdownOptions;
    }

    public MethodParameter withDynamicDropdownOptions(DynamicDropdownOptions dynamicDropdownOptions) {
        this.dynamicDropdownOptions = dynamicDropdownOptions;
        return this;
    }

    /**
     * <p>Original spec-file type: RadioOptions</p>
     * 
     * 
     */
    @JsonProperty("radio_options")
    public RadioOptions getRadioOptions() {
        return radioOptions;
    }

    /**
     * <p>Original spec-file type: RadioOptions</p>
     * 
     * 
     */
    @JsonProperty("radio_options")
    public void setRadioOptions(RadioOptions radioOptions) {
        this.radioOptions = radioOptions;
    }

    public MethodParameter withRadioOptions(RadioOptions radioOptions) {
        this.radioOptions = radioOptions;
        return this;
    }

    /**
     * <p>Original spec-file type: TabOptions</p>
     * 
     * 
     */
    @JsonProperty("tab_options")
    public TabOptions getTabOptions() {
        return tabOptions;
    }

    /**
     * <p>Original spec-file type: TabOptions</p>
     * 
     * 
     */
    @JsonProperty("tab_options")
    public void setTabOptions(TabOptions tabOptions) {
        this.tabOptions = tabOptions;
    }

    public MethodParameter withTabOptions(TabOptions tabOptions) {
        this.tabOptions = tabOptions;
        return this;
    }

    /**
     * <p>Original spec-file type: TextSubdataOptions</p>
     * <pre>
     * Defines a parameter field that allows autocomplete based on
     * subdata of an existing object.  For instance, selection of feature ids
     * from a Genome object.  It will appear as a text field with dropdown
     * similar to selection of other WS data objects.
     *     placeholder - placeholder text to display in the field
     *     multiselection - if true, then multiple selections are allowed in
     *                      a single input field.  This will override the
     *                      allow_multiple option (which allows user addition)
     *                      of additional fields.  If true, then this parameter
     *                      will return a list. Default= false
     *     show_src_obj - if true, then the dropdown will indicate the ids along
     *                    with some text indicating what data object the subdata
     *                    was retrieved from. Default=true
     *     allow_custom - if true, then user specified inputs not found in the
     *                    list are accepted.  if false, users can only select from
     *                    the valid list of selections. Default=false
     * </pre>
     * 
     */
    @JsonProperty("textsubdata_options")
    public TextSubdataOptions getTextsubdataOptions() {
        return textsubdataOptions;
    }

    /**
     * <p>Original spec-file type: TextSubdataOptions</p>
     * <pre>
     * Defines a parameter field that allows autocomplete based on
     * subdata of an existing object.  For instance, selection of feature ids
     * from a Genome object.  It will appear as a text field with dropdown
     * similar to selection of other WS data objects.
     *     placeholder - placeholder text to display in the field
     *     multiselection - if true, then multiple selections are allowed in
     *                      a single input field.  This will override the
     *                      allow_multiple option (which allows user addition)
     *                      of additional fields.  If true, then this parameter
     *                      will return a list. Default= false
     *     show_src_obj - if true, then the dropdown will indicate the ids along
     *                    with some text indicating what data object the subdata
     *                    was retrieved from. Default=true
     *     allow_custom - if true, then user specified inputs not found in the
     *                    list are accepted.  if false, users can only select from
     *                    the valid list of selections. Default=false
     * </pre>
     * 
     */
    @JsonProperty("textsubdata_options")
    public void setTextsubdataOptions(TextSubdataOptions textsubdataOptions) {
        this.textsubdataOptions = textsubdataOptions;
    }

    public MethodParameter withTextsubdataOptions(TextSubdataOptions textsubdataOptions) {
        this.textsubdataOptions = textsubdataOptions;
        return this;
    }

    @JsonAnyGetter
    public Map<java.lang.String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    @JsonAnySetter
    public void setAdditionalProperties(java.lang.String name, Object value) {
        this.additionalProperties.put(name, value);
    }

    @Override
    public java.lang.String toString() {
        return ((((((((((((((((((((((((((((((((((((((((((((((("MethodParameter"+" [id=")+ id)+", uiName=")+ uiName)+", shortHint=")+ shortHint)+", description=")+ description)+", fieldType=")+ fieldType)+", allowMultiple=")+ allowMultiple)+", optional=")+ optional)+", advanced=")+ advanced)+", disabled=")+ disabled)+", uiClass=")+ uiClass)+", defaultValues=")+ defaultValues)+", validFileTypes=")+ validFileTypes)+", textOptions=")+ textOptions)+", textareaOptions=")+ textareaOptions)+", intsliderOptions=")+ intsliderOptions)+", floatsliderOptions=")+ floatsliderOptions)+", checkboxOptions=")+ checkboxOptions)+", dropdownOptions=")+ dropdownOptions)+", dynamicDropdownOptions=")+ dynamicDropdownOptions)+", radioOptions=")+ radioOptions)+", tabOptions=")+ tabOptions)+", textsubdataOptions=")+ textsubdataOptions)+", additionalProperties=")+ additionalProperties)+"]");
    }

}
